"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _tinySlider = require("tiny-slider/src/tiny-slider");

var _utils = require("./utils");

require("tiny-slider/dist/tiny-slider.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Wrapper component to show carousel, controlling the lifecycle
 * methods and settings update.
 * @param {object} settings - setting to configure tiny-slider plugin
 * @param {function} onClick - callback to return slide clicked
 *
 * @param {function} onIndexChanged - event bind
 * @param {function} onTransitionStart - event bind
 * @param {function} onTransitionEnd - event bind
 * @param {function} onTouchStart - event bind
 * @param {function} onTouchMove - event bind
 * @param {function} onTouchEnd - event bind
 *
 * @returns {ReactElement}
 */
var Carousel = /*#__PURE__*/function (_PureComponent) {
  _inherits(Carousel, _PureComponent);

  var _super = _createSuper(Carousel);

  function Carousel(props) {
    var _this;

    _classCallCheck(this, Carousel);

    _this = _super.call(this, props);
    _this.state = {
      defaultSettings: {}
    };
    _this.slider = null;
    _this.build = _this.build.bind(_assertThisInitialized(_this));
    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));
    _this.mergedSettings = 0;
    _this.count = 0;
    return _this;
  }
  /**
   * Fire click on carousel when no draggin and call the onClick callback on prop
   */


  _createClass(Carousel, [{
    key: "onClick",
    value: function onClick(event) {
      var onClick = this.props.onClick;
      if (this.dragging || !onClick) return; // when only one element the slider doesnt init

      if (!this.slider) return onClick(null, null, event);
      var info = this.slider.getInfo();
      var slideClicked = info.slideItems[info.index]; // call click callback wiht info and slide clicked

      onClick(slideClicked, info, event);
    }
    /** * Initialize the carousel plugin with new settings */

  }, {
    key: "build",
    value: function build() {
      var _this2 = this;

      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (this.slider) this.slider.destroy();
      /* INIT CAROUSEL */

      this.mergedSettings = _objectSpread(_objectSpread(_objectSpread({}, this.state.defaultSettings), settings), {}, {
        container: this.ref,
        onInit: function onInit() {
          _this2.postInit();
        }
      });
      this.slider = (0, _tinySlider.tns)(this.mergedSettings); // call events binding

      if (this.slider) return; // if the slider doesn't load because there is just a child
      // so add class to normal behavior

      if (this.ref) this.ref.className += ' tns-item';
    }
    /**
     * Once the slider plugins has been initialized
     */

  }, {
    key: "postInit",
    value: function postInit() {
      var _this3 = this;

      if (!this.slider) {
        if (this.count >= 4) {
          return this.props.onInit(false); // call initMetod anyway
        }

        this.count++;
        return setTimeout(this.postInit.bind(this), 100);
      }

      this.count = 0;
      var events = this.slider.events;
      var _this$props = this.props,
          onIndexChanged = _this$props.onIndexChanged,
          onTransitionStart = _this$props.onTransitionStart,
          onTransitionEnd = _this$props.onTransitionEnd,
          onTouchStart = _this$props.onTouchStart,
          onTouchMove = _this$props.onTouchMove,
          onTouchEnd = _this$props.onTouchEnd,
          onInit = _this$props.onInit;
      /* BIND EVENTS */
      // change draggin value to purge onClick event.

      events.on('transitionStart', function (info) {
        _this3.dragging = true;
        if (onTransitionStart) onTransitionStart(info);
      });
      events.on('transitionEnd', function (info) {
        _this3.dragging = false;
        if (onTransitionEnd) onTransitionEnd(info);
      });
      if (onIndexChanged) events.on('indexChanged', onIndexChanged);
      if (onTouchStart) events.on('touchStart', onTouchStart);
      if (onTouchMove) events.on('touchMove', onTouchMove);
      if (onTouchEnd) events.on('touchEnd', onTouchEnd); // call on Innit

      onInit(true);
    }
    /* LIFECYCLE EVENTS */

  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.build(this.props.settings);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (!(0, _utils.ObjectsEqual)(prevProps.settings, this.props.settings) || !(0, _utils.ChildrenEqual)(prevProps.children, this.props.children)) {
        // prepare to reinitializationgit
        if (this.slider) {
          this.slider.rebuild();
        } else {
          this.build(this.props.settings);
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.slider) this.slider.destroy();
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var _this$props2 = this.props,
          children = _this$props2.children,
          className = _this$props2.className,
          style = _this$props2.style;
      return /*#__PURE__*/_react["default"].createElement("div", {
        ref: function ref(ele) {
          return _this4.ref = ele;
        },
        onClick: this.onClick,
        className: className,
        style: style
      }, children);
    }
  }]);

  return Carousel;
}(_react.PureComponent);

Carousel.propTypes = {
  settings: _propTypes["default"].object,
  onClick: _propTypes["default"].func,
  // custom tiny events events
  onIndexChanged: _propTypes["default"].func,
  onTransitionStart: _propTypes["default"].func,
  onTransitionEnd: _propTypes["default"].func,
  onTouchStart: _propTypes["default"].func,
  onTouchMove: _propTypes["default"].func,
  onTouchEnd: _propTypes["default"].func,
  // events
  onInit: _propTypes["default"].func
};
Carousel.defaultProps = {
  onInit: function onInit() {}
};
var _default = Carousel;
exports["default"] = _default;